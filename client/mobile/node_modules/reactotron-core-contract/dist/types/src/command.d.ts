import type { LogPayload } from "./log";
import { EditorOpenPayload } from "./openInEditor";
import type { StateActionCompletePayload, StateActionDispatchPayload, StateBackupRequestPayload, StateBackupResponsePayload, StateKeysRequestPayload, StateKeysResponsePayload, StateRestoreRequestPayload, StateValuesChangePayload, StateValuesRequestPayload, StateValuesResponsePayload, StateValuesSubscribePayload } from "./state";
export declare const CommandType: {
    readonly ApiResponse: "api.response";
    readonly AsyncStorageMutation: "asyncStorage.mutation";
    readonly Benchmark: "benchmark.report";
    readonly ClientIntro: "client.intro";
    readonly Display: "display";
    readonly Image: "image";
    readonly Log: "log";
    readonly SagaTaskComplete: "saga.task.complete";
    readonly StateActionComplete: "state.action.complete";
    readonly StateKeysResponse: "state.keys.response";
    readonly StateValuesChange: "state.values.change";
    readonly StateValuesResponse: "state.values.response";
    readonly StateBackupResponse: "state.backup.response";
    readonly StateBackupRequest: "state.backup.request";
    readonly StateRestoreRequest: "state.restore.request";
    readonly StateActionDispatch: "state.action.dispatch";
    readonly StateValuesSubscribe: "state.values.subscribe";
    readonly StateKeysRequest: "state.keys.request";
    readonly StateValuesRequest: "state.values.request";
    readonly CustomCommandRegister: "customCommand.register";
    readonly CustomCommandUnregister: "customCommand.unregister";
    readonly Clear: "clear";
    readonly ReplLsResponse: "repl.ls.response";
    readonly ReplExecuteResponse: "repl.execute.response";
    readonly DevtoolsOpen: "devtools.open";
    readonly DevtoolsReload: "devtools.reload";
    readonly EditorOpen: "editor.open";
    readonly Storybook: "storybook";
    readonly Overlay: "overlay";
};
export type CommandTypeKey = (typeof CommandType)[keyof typeof CommandType];
export interface CommandMap {
    [CommandType.ApiResponse]: any;
    [CommandType.AsyncStorageMutation]: any;
    [CommandType.Benchmark]: any;
    [CommandType.ClientIntro]: any;
    [CommandType.Display]: any;
    [CommandType.Image]: any;
    [CommandType.Log]: LogPayload;
    [CommandType.SagaTaskComplete]: any;
    [CommandType.StateActionComplete]: StateActionCompletePayload;
    [CommandType.StateKeysResponse]: StateKeysResponsePayload;
    [CommandType.StateValuesChange]: StateValuesChangePayload;
    [CommandType.StateValuesResponse]: StateValuesResponsePayload;
    [CommandType.StateBackupResponse]: StateBackupResponsePayload;
    [CommandType.StateBackupRequest]: StateBackupRequestPayload;
    [CommandType.StateRestoreRequest]: StateRestoreRequestPayload;
    [CommandType.StateActionDispatch]: StateActionDispatchPayload;
    [CommandType.StateValuesSubscribe]: StateValuesSubscribePayload;
    [CommandType.StateKeysRequest]: StateKeysRequestPayload;
    [CommandType.StateValuesRequest]: StateValuesRequestPayload;
    [CommandType.CustomCommandRegister]: any;
    [CommandType.CustomCommandUnregister]: any;
    [CommandType.Clear]: undefined;
    [CommandType.ReplLsResponse]: any;
    [CommandType.ReplExecuteResponse]: any;
    [CommandType.DevtoolsOpen]: undefined;
    [CommandType.DevtoolsReload]: undefined;
    [CommandType.EditorOpen]: EditorOpenPayload;
    [CommandType.Storybook]: boolean;
    [CommandType.Overlay]: boolean;
}
export interface Command<Type extends CommandTypeKey = CommandTypeKey, Payload extends Record<string, any> = CommandMap[Type]> {
    type: CommandTypeKey;
    connectionId: number;
    clientId?: string;
    date: Date;
    deltaTime: number;
    important: boolean;
    messageId: number;
    payload: Payload;
}
export type CommandEvent = (command: Command) => void;
