import * as React from 'react';
import Animated from 'react-native-reanimated';
export declare const Overlay: React.ForwardRefExoticComponent<{
    children?: React.ReactNode | Animated.SharedValue<React.ReactNode>;
    hitSlop?: import("react-native").Insets | Animated.SharedValue<import("react-native").Insets | undefined> | undefined;
    id?: string | Animated.SharedValue<string | undefined> | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | Animated.SharedValue<((event: import("react-native").LayoutChangeEvent) => void) | undefined> | undefined;
    pointerEvents?: "none" | "box-none" | "box-only" | "auto" | Animated.SharedValue<"none" | "box-none" | "box-only" | "auto" | undefined> | undefined;
    removeClippedSubviews?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    testID?: string | Animated.SharedValue<string | undefined> | undefined;
    nativeID?: string | Animated.SharedValue<string | undefined> | undefined;
    collapsable?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    needsOffscreenAlphaCompositing?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    renderToHardwareTextureAndroid?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    focusable?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    shouldRasterizeIOS?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    isTVSelectable?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    hasTVPreferredFocus?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    tvParallaxProperties?: import("react-native").TVParallaxProperties | Animated.SharedValue<import("react-native").TVParallaxProperties | undefined> | undefined;
    tvParallaxShiftDistanceX?: number | Animated.SharedValue<number | undefined> | undefined;
    tvParallaxShiftDistanceY?: number | Animated.SharedValue<number | undefined> | undefined;
    tvParallaxTiltAngle?: number | Animated.SharedValue<number | undefined> | undefined;
    tvParallaxMagnification?: number | Animated.SharedValue<number | undefined> | undefined;
    onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
    onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
    onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => boolean) | undefined> | undefined;
    onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | Animated.SharedValue<((event: import("react-native").GestureResponderEvent) => void) | undefined> | undefined;
    onPointerEnter?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    onPointerEnterCapture?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    onPointerLeave?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    onPointerLeaveCapture?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    onPointerMove?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    onPointerMoveCapture?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    onPointerCancel?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    onPointerCancelCapture?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    onPointerDown?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    onPointerDownCapture?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    onPointerUp?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    onPointerUpCapture?: ((event: import("react-native").PointerEvent) => void) | Animated.SharedValue<((event: import("react-native").PointerEvent) => void) | undefined> | undefined;
    accessible?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | Animated.SharedValue<readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined> | undefined;
    accessibilityLabel?: string | Animated.SharedValue<string | undefined> | undefined;
    'aria-label'?: string | Animated.SharedValue<string | undefined> | undefined;
    accessibilityRole?: import("react-native").AccessibilityRole | Animated.SharedValue<import("react-native").AccessibilityRole | undefined> | undefined;
    accessibilityState?: import("react-native").AccessibilityState | Animated.SharedValue<import("react-native").AccessibilityState | undefined> | undefined;
    'aria-busy'?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    'aria-checked'?: boolean | "mixed" | Animated.SharedValue<boolean | "mixed" | undefined> | undefined;
    'aria-disabled'?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    'aria-expanded'?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    'aria-selected'?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    'aria-labelledby'?: string | Animated.SharedValue<string | undefined> | undefined;
    accessibilityHint?: string | Animated.SharedValue<string | undefined> | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | Animated.SharedValue<import("react-native").AccessibilityValue | undefined> | undefined;
    'aria-valuemax'?: number | Animated.SharedValue<number | undefined> | undefined;
    'aria-valuemin'?: number | Animated.SharedValue<number | undefined> | undefined;
    'aria-valuenow'?: number | Animated.SharedValue<number | undefined> | undefined;
    'aria-valuetext'?: string | Animated.SharedValue<string | undefined> | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | Animated.SharedValue<((event: import("react-native").AccessibilityActionEvent) => void) | undefined> | undefined;
    importantForAccessibility?: "auto" | "no-hide-descendants" | "yes" | "no" | Animated.SharedValue<"auto" | "no-hide-descendants" | "yes" | "no" | undefined> | undefined;
    'aria-hidden'?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    'aria-live'?: "polite" | "assertive" | "off" | Animated.SharedValue<"polite" | "assertive" | "off" | undefined> | undefined;
    'aria-modal'?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    role?: import("react-native").Role | Animated.SharedValue<import("react-native").Role | undefined> | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | Animated.SharedValue<"none" | "polite" | "assertive" | undefined> | undefined;
    accessibilityLabelledBy?: string | string[] | Animated.SharedValue<string | string[] | undefined> | undefined;
    accessibilityElementsHidden?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    accessibilityViewIsModal?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    onAccessibilityEscape?: (() => void) | Animated.SharedValue<(() => void) | undefined> | undefined;
    onAccessibilityTap?: (() => void) | Animated.SharedValue<(() => void) | undefined> | undefined;
    onMagicTap?: (() => void) | Animated.SharedValue<(() => void) | undefined> | undefined;
    accessibilityIgnoresInvertColors?: boolean | Animated.SharedValue<boolean | undefined> | undefined;
    accessibilityLanguage?: string | Animated.SharedValue<string | undefined> | undefined;
} & {
    style?: import("react-native").StyleProp<Animated.AnimateStyle<import("react-native").StyleProp<import("react-native").ViewStyle>>>;
} & {
    animatedProps?: Partial<Animated.AnimateProps<import("react-native").ViewProps>> | undefined;
    layout?: import("react-native-reanimated").BaseAnimationBuilder | import("react-native-reanimated").LayoutAnimationFunction | typeof import("react-native-reanimated").BaseAnimationBuilder | undefined;
    entering?: import("react-native-reanimated").BaseAnimationBuilder | typeof import("react-native-reanimated").BaseAnimationBuilder | import("react-native-reanimated").EntryExitAnimationFunction | import("react-native-reanimated").Keyframe | undefined;
    exiting?: import("react-native-reanimated").BaseAnimationBuilder | typeof import("react-native-reanimated").BaseAnimationBuilder | import("react-native-reanimated").EntryExitAnimationFunction | import("react-native-reanimated").Keyframe | undefined;
    sharedTransitionTag?: string | undefined;
    sharedTransitionStyle?: import("react-native-reanimated").ILayoutAnimationBuilder | undefined;
} & {
    progress: Animated.SharedValue<number>;
    onPress: () => void;
    accessibilityLabel?: string | undefined;
} & React.RefAttributes<Animated.View>>;
//# sourceMappingURL=Overlay.d.ts.map