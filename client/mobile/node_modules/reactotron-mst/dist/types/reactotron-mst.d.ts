import type { IStateTreeNode, IMiddlewareEvent } from "mobx-state-tree";
import type { Command } from "reactotron-core-contract";
import { ReactotronCore } from "reactotron-core-client";
export type MstPluginFilter = (event: IMiddlewareEvent) => boolean;
export interface MstPluginOptions {
    /**
     * Fine-grain control over what gets sent to the Reactotron app.
     */
    filter?: MstPluginFilter;
    /**
     * When requesting keys, values, or subscribing, configures whether
     * we talk to the live state object (great for `volatile` state) or the
     * snapshot.  Defaults to `live`.
     */
    queryMode?: "live" | "snapshot";
}
/**
 * A factory function for creating the plugin.
 *
 * @param opts Plugin options.
 */
export declare function mst(opts?: MstPluginOptions): <Client extends ReactotronCore = ReactotronCore>(reactotron: Client) => {
    onCommand: (command: Command) => void;
    features: {
        trackMstNode: (node: IStateTreeNode, nodeName?: string) => {
            readonly kind: "required";
            readonly message?: undefined;
        } | {
            readonly kind: "already-tracking";
            readonly message?: undefined;
        } | {
            readonly kind: "ok";
            readonly message?: undefined;
        } | {
            readonly kind: "tracking-error";
            readonly message: string;
        } | {
            readonly kind: "invalid-node";
            readonly message?: undefined;
        };
    };
};
